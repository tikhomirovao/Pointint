#include <iostream>
#include <stdlib.h>

using namespace std;

//класс точка
class Point
{
	//координаты точки
	int X, Y;
public:
	//Конструктор с двумя параметрами, со значением параметров по умолчанию
	//и унифицированной инициализацией полей
	Point(int x = 0, int y = 0) :X{ x }, Y{ y } {}

	//метод вывода экран
	void Show()const
	{
		cout << X << ";" << Y << endl;
		cout << endl;
	}

	//методы для доступа к private полям для глобальной перегрузки операторов
	int GetX()const { return X; }
	int GetY()const { return Y; }
	void SetX(int x) { X = x; }
	void SetY(int y) { Y = y; }

	/*//перегрузка оператора сложения в качестве метода для ситуации Point + int
	Point operator+(int Digit)const
	{
		//создаем временный объект для хранения и возврата результата, со значением полей,
		Point Result(this->X, Y); //как у текущего объекта, для которого вызван оператор +
		//увеличиваем значение обоих полей объекта Result на значение переменной Digit типа данных int
		Result.X += Digit;
		Result.Y += Digit;
		return Result; //возвращаем значение итогового(нового) объекта
	}
	//перегрузка оператора вычитания в качестве метода для ситуации  Point - int
	Point operator-(int Digit)const
	{
		//создаем временный объект для хранения и возврата результата, со значением полей,
		Point Result(this->X, Y); //как у текущего объекта, для которого вызван оператор -
		//уменьшаем значение обоих полей объекта Result на значение переменной Digit типа данных int
		Result.X -= Digit;
		Result.Y -= Digit;
		return Result; //возвращаем значение итогового(нового) объекта
	}
	//перегрузка оператора умножения в качестве метода для ситуации  Point * int
	Point operator*(int Digit)const
	{
		//создаем временный объект для хранения и возврата результата, со значением полей,
		Point Result(this->X, Y); //как у текущего объекта, для которого вызван оператор *
		//умножаем значение обоих полей объекта Result на значение переменной Digit типа данных int
		Result.X *= Digit;
		Result.Y *= Digit;
		return Result; //возвращаем значение итогового(нового) объекта
	}
	//перегрузка оператора деления в качестве метода для ситуации  Point / int
	Point operator/(int Digit)const
	{
		//создаем временный объект для хранения и возврата результата, со значением полей,
		Point Result(this->X, Y); //как у текущего объекта, для которого вызван оператор /
		//делим значение обоих полей объекта Result на значение переменной Digit типа данных int
		Result.X /= Digit;
		Result.Y /= Digit;
		return Result; //возвращаем значение итогового(нового) объекта
	}
	//прототип дружественной перегрузки оператора + для ситуации int + Point
	friend Point operator+(int Digit, const Point& P);
	//прототип дружественной перегрузки оператора - для ситуации int - Point
	friend Point operator-(int Digit, const Point& P);
	//прототип дружественной перегрузки оператора * для ситуации int * Point
	friend Point operator*(int Digit, const Point& P);
	//прототип дружественной перегрузки оператора / для ситуации int / Point
	friend Point operator/(int Digit, const Point& P);*/
};

//прототип глобальной перегрузки оператора + для ситуации Point+int
Point operator+(const Point& P, int Digit);
//прототип глобальной перегрузки оператора + для ситуации int+Point
Point operator+(int Digit, const Point& P);
//прототип глобальной перегрузки оператора - для ситуации Point-int
Point operator-(const Point& P, int Digit);
//прототип глобальной перегрузки оператора - для ситуации int-Point
Point operator-(int Digit, const Point& P);
//прототип глобальной перегрузки оператора * для ситуации Point*int
Point operator*(const Point& P, int Digit);
//прототип глобальной перегрузки оператора * для ситуации int*Point
Point operator*(int Digit, const Point& P);
//прототип глобальной перегрузки оператора / для ситуации Point/int
Point operator/(const Point& P, int Digit);
//прототип глобальной перегрузки оператора / для ситуации int/Point
Point operator/(int Digit, const Point& P);



int main()
{
	system("chcp 1251");
	system("cls");

	Point A(45, 25);
	cout << "Точка А: ";
	A.Show();

	Point B = A + 20;
	cout << "Точка B: ";
	B.Show();

	Point C = 10 + B;
	cout << "Точка C: ";
	C.Show();

	Point D = C - 15;
	cout << "Точка D: ";
	D.Show();

	Point F = 50 - D;
	cout << "Точка F: ";
	F.Show();

	Point G = F * 3;
	cout << "Точка G : ";
	G.Show();

	Point I = 2 * G;
	cout << "Точка I : ";
	I.Show();

	Point K = I / 2;
	cout << "Точка K : ";
	K.Show();

	Point L = 90 / K;
	cout << "Точка L : ";
	L.Show();

	/*Point B = A + 10;
	cout << "Точка B: ";
	B.Show();

	Point C = B-5;
	cout << "Точка C: ";
	C.Show();

	Point D = C * 2;
	cout << "Точка D: ";
	D.Show();

	Point E = D / 5;
	cout << "Точка E: ";
	E.Show();

	Point F = 25 + E;
	cout << "Точка F: ";
	F.Show();

	Point G = 100 - F;
	cout << "Точка G: ";
	G.Show();

	Point I = 2 * G;
	cout << "Точка I: ";
	I.Show();

	Point K = 300 / I;
	cout << "Точка K: ";
	K.Show();*/


}
//реализация глобальной перегрузки оператора + для ситуации Point+int
Point operator+(const Point& P, int Digit)
{
	//создаем пустой временный объект для хранения и возврата результата
	Point Result;
	//изменяем значения полей на нужные
	Result.SetX(P.GetX() + Digit); //получаем значение поля Х объекта по ссылке P через метод геттер GetX,
	//затем складываем значение переменной Digit со значением поля X и передаем результат в поле X объекта Result, через метод сеттер SetX
	Result.SetY(P.GetY() + Digit);//получаем значение поля Y объекта по ссылке P через метод геттер GetY,
	//затем складываем значение переменной Digit со значением поля Y и передаем результат в поле Y объекта Result, через метод сеттер SetY
	return Result; //возвращаем значение итогового(нового) объекта
}
//реализация глобальной перегрузки оператора + для ситуации int+Point
Point operator+(int Digit, const Point& P)
{
	//создаем пустой временный объект для хранения и возврата результата
	Point Result;
	//изменяем значения полей на нужные
	Result.SetX(P.GetX() + Digit); //получаем значение поля Х объекта по ссылке P через метод геттер GetX,
	//затем складываем значение переменной Digit со значением поля X и передаем результат в поле X объекта Result, через метод сеттер SetX
	Result.SetY(P.GetY() + Digit);//получаем значение поля Y объекта по ссылке P через метод геттер GetY,
	//затем складываем значение переменной Digit со значением поля Y и передаем результат в поле Y объекта Result, через метод сеттер SetY
	return Result; //возвращаем значение итогового(нового) объекта
}
//реализация глобальной перегрузки оператора - для ситуации Point-int
Point operator-(const Point& P, int Digit)
{
	//создаем пустой временный объект для хранения и возврата результата
	Point Result;
	//изменяем значения полей на нужные
	Result.SetX(P.GetX() - Digit); //получаем значение поля Х объекта по ссылке P через метод геттер GetX,
	//затем вычитаем из значения поля X значение переменной Digit и передаем результат в поле X объекта Result, через метод сеттер SetX
	Result.SetY(P.GetY() - Digit);//получаем значение поля Y объекта по ссылке P через метод геттер GetY,
	//затем вычитаем из значения поля Y значение переменной Digit и передаем результат в поле Y объекта Result, через метод сеттер SetY
	return Result; //возвращаем значение итогового(нового) объекта
}
//реализация глобальной перегрузки оператора - для ситуации int- Point
Point operator-(int Digit, const Point& P)
{
	//создаем пустой временный объект для хранения и возврата результата
	Point Result;
	//изменяем значения полей на нужные
	Result.SetX(Digit - P.GetX()); //получаем значение поля Х объекта по ссылке P через метод геттер GetX,
	//затем вычитаем из значения переменной Digit значения поля X  и передаем результат в поле X объекта Result, через метод сеттер SetX
	Result.SetY(Digit - P.GetY());//получаем значение поля Y объекта по ссылке P через метод геттер GetY,
	//затем вычитаем из значения переменной Digit значения поля Y и передаем результат в поле Y объекта Result, через метод сеттер SetY
	return Result; //возвращаем значение итогового(нового) объекта
}
//реализация глобальной перегрузки оператора * для ситуации Point*int
Point operator*(const Point& P, int Digit)
{
	//создаем пустой временный объект для хранения и возврата результата
	Point Result;
	//изменяем значения полей на нужные
	Result.SetX(P.GetX() * Digit); //получаем значение поля Х объекта по ссылке P через метод геттер GetX,
	//затем умножаем значение переменной Digit со значением поля X и передаем результат в поле X объекта Result, через метод сеттер SetX
	Result.SetY(P.GetY() * Digit);//получаем значение поля Y объекта по ссылке P через метод геттер GetY,
	//затем умножаем значение переменной Digit со значением поля Y и передаем результат в поле Y объекта Result, через метод сеттер SetY
	return Result; //возвращаем значение итогового(нового) объекта
}
//реализация глобальной перегрузки оператора * для ситуации int*Point
Point operator*(int Digit, const Point& P)
{
	//создаем пустой временный объект для хранения и возврата результата
	Point Result;
	//изменяем значения полей на нужные
	Result.SetX(P.GetX() * Digit); //получаем значение поля Х объекта по ссылке P через метод геттер GetX,
	//затем умножаем значение переменной Digit со значением поля X и передаем результат в поле X объекта Result, через метод сеттер SetX
	Result.SetY(P.GetY() * Digit);//получаем значение поля Y объекта по ссылке P через метод геттер GetY,
	//затем умножаем значение переменной Digit со значением поля Y и передаем результат в поле Y объекта Result, через метод сеттер SetY
	return Result; //возвращаем значение итогового(нового) объекта
}
//реализация глобальной перегрузки оператора / для ситуации Point/int
Point operator/(const Point& P, int Digit)
{
	//создаем пустой временный объект для хранения и возврата результата
	Point Result;
	//изменяем значения полей на нужные
	Result.SetX(P.GetX() / Digit); //получаем значение поля Х объекта по ссылке P через метод геттер GetX,
	//затем делим значение поля X  на значение  Digit  и передаем результат в поле X объекта Result, через метод сеттер SetX
	Result.SetY(P.GetY() / Digit);//получаем значение поля Y объекта по ссылке P через метод геттер GetY,
	//затем делим значение поля Y на значение Digit и передаем результат в поле Y объекта Result, через метод сеттер SetY
	return Result; //возвращаем значение итогового(нового) объекта
}
//реализация глобальной перегрузки оператора / для ситуации int/Point

Point operator/(int Digit, const Point& P)
{
	//создаем пустой временный объект для хранения и возврата результата
	Point Result;
	//изменяем значения полей на нужные
	Result.SetX(Digit / P.GetX()); //получаем значение поля Х объекта по ссылке P через метод геттер GetX,
	//затем делим  значение  Digit на значение поля X и передаем результат в поле X объекта Result, через метод сеттер SetX
	Result.SetY(Digit / P.GetY());//получаем значение поля Y объекта по ссылке P через метод геттер GetY,
	//затем делим  значение Digit на значение поля Y  и передаем результат в поле Y объекта Result, через метод сеттер SetY
	return Result; //возвращаем значение итогового(нового) объекта
}

/*//Реализация дружественной перегрузки оператора + для ситуации int + Point
Point operator+(int Digit, const Point& P)
{
		Point Result(P.X, P.Y);
		//увеличиваем значения обоих полей на значение переменной Digit типа данных int
		Result.X += Digit;
		Result.Y += Digit;
		return Result; //возвращаем значение итогового(нового) объекта
}
//Реализация дружественной перегрузки оператора - для ситуации int - Point
Point operator-(int Digit, const Point& P)
{
	Point Result(P.X, P.Y);
	//вычитаем из переменной Digit типа данных int значения обоих полей
	Result.X = Digit - P.X;
	Result.Y = Digit - P.Y;
	return Result; //возвращаем значение итогового(нового) объекта
}
//Реализация дружественной перегрузки оператора * для ситуации int * Point
Point operator*(int Digit, const Point& P)
{
	Point Result(P.X, P.Y);
	//увеличиваем значения обоих полей на значение переменной Digit типа данных int
	Result.X *= Digit;
	Result.Y *= Digit;
	return Result; //возвращаем значение итогового(нового) объекта
}
//Реализация дружественной перегрузки оператора / для ситуации int / Point
Point operator/(int Digit, const Point& P)
{
	Point Result(P.X, P.Y);
	//делим значение переменной Digit типа данных int на значения обоих полей
	Result.X = Digit/P.X;
	Result.Y = Digit/P.Y;
	return Result; //возвращаем значение итогового(нового) объекта
}*/
// OperatorOverloadPoint.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.

#include <iostream>
#include <stdlib.h>

using namespace std;

//класс точка
class Point
{
	//координаты точки
	int X, Y;
public:
	//Конструктор с двумя параметрами, со значением параметров по умолчанию
	//и унифицированной инициализацией полей
	Point(int x = 0, int y = 0) :X{ x }, Y{ y } {}

	//метод вывода экран
	void Show()const
	{
		cout << X << ";" << Y << endl;
		cout << endl;
	}

	//методы для доступа к private полям для глобальной перегрузки операторов
	int GetX()const { return X; }
	int GetY()const { return Y; }
	void SetX(int x) { X = x; }
	void SetY(int y) { Y = y; }

	/*//перегрузка оператора сложения в качестве метода для ситуации Point + int
	Point operator+(int Digit)const
	{
		//создаем временный объект для хранения и возврата результата, со значением полей,
		Point Result(this->X, Y); //как у текущего объекта, для которого вызван оператор +
		//увеличиваем значение обоих полей объекта Result на значение переменной Digit типа данных int
		Result.X += Digit;
		Result.Y += Digit;
		return Result; //возвращаем значение итогового(нового) объекта
	}
	//перегрузка оператора вычитания в качестве метода для ситуации  Point - int
	Point operator-(int Digit)const
	{
		//создаем временный объект для хранения и возврата результата, со значением полей,
		Point Result(this->X, Y); //как у текущего объекта, для которого вызван оператор -
		//уменьшаем значение обоих полей объекта Result на значение переменной Digit типа данных int
		Result.X -= Digit;
		Result.Y -= Digit;
		return Result; //возвращаем значение итогового(нового) объекта
	}
	//перегрузка оператора умножения в качестве метода для ситуации  Point * int
	Point operator*(int Digit)const
	{
		//создаем временный объект для хранения и возврата результата, со значением полей,
		Point Result(this->X, Y); //как у текущего объекта, для которого вызван оператор *
		//умножаем значение обоих полей объекта Result на значение переменной Digit типа данных int
		Result.X *= Digit;
		Result.Y *= Digit;
		return Result; //возвращаем значение итогового(нового) объекта
	}
	//перегрузка оператора деления в качестве метода для ситуации  Point / int
	Point operator/(int Digit)const
	{
		//создаем временный объект для хранения и возврата результата, со значением полей,
		Point Result(this->X, Y); //как у текущего объекта, для которого вызван оператор /
		//делим значение обоих полей объекта Result на значение переменной Digit типа данных int
		Result.X /= Digit;
		Result.Y /= Digit;
		return Result; //возвращаем значение итогового(нового) объекта
	}
	//прототип дружественной перегрузки оператора + для ситуации int + Point
	friend Point operator+(int Digit, const Point& P);
	//прототип дружественной перегрузки оператора - для ситуации int - Point
	friend Point operator-(int Digit, const Point& P);
	//прототип дружественной перегрузки оператора * для ситуации int * Point
	friend Point operator*(int Digit, const Point& P);
	//прототип дружественной перегрузки оператора / для ситуации int / Point
	friend Point operator/(int Digit, const Point& P);*/
};

//прототип глобальной перегрузки оператора + для ситуации Point+int
Point operator+(const Point& P, int Digit);
//прототип глобальной перегрузки оператора + для ситуации int+Point
Point operator+(int Digit, const Point& P);
//прототип глобальной перегрузки оператора - для ситуации Point-int
Point operator-(const Point& P, int Digit);
//прототип глобальной перегрузки оператора - для ситуации int-Point
Point operator-(int Digit, const Point& P);
//прототип глобальной перегрузки оператора * для ситуации Point*int
Point operator*(const Point& P, int Digit);
//прототип глобальной перегрузки оператора * для ситуации int*Point
Point operator*(int Digit, const Point& P);
//прототип глобальной перегрузки оператора / для ситуации Point/int
Point operator/(const Point& P, int Digit);
//прототип глобальной перегрузки оператора / для ситуации int/Point
Point operator/(int Digit, const Point& P);



int main()
{
	system("chcp 1251");
	system("cls");

	Point A(45, 25);
	cout << "Точка А: ";
	A.Show();

	Point B = A + 20;
	cout << "Точка B: ";
	B.Show();

	Point C = 10 + B;
	cout << "Точка C: ";
	C.Show();

	Point D = C - 15;
	cout << "Точка D: ";
	D.Show();

	Point F = 50 - D;
	cout << "Точка F: ";
	F.Show();

	Point G = F * 3;
	cout << "Точка G : ";
	G.Show();

	Point I = 2 * G;
	cout << "Точка I : ";
	I.Show();

	Point K = I / 2;
	cout << "Точка K : ";
	K.Show();

	Point L = 90 / K;
	cout << "Точка L : ";
	L.Show();

	/*Point B = A + 10;
	cout << "Точка B: ";
	B.Show();

	Point C = B-5;
	cout << "Точка C: ";
	C.Show();

	Point D = C * 2;
	cout << "Точка D: ";
	D.Show();

	Point E = D / 5;
	cout << "Точка E: ";
	E.Show();

	Point F = 25 + E;
	cout << "Точка F: ";
	F.Show();

	Point G = 100 - F;
	cout << "Точка G: ";
	G.Show();

	Point I = 2 * G;
	cout << "Точка I: ";
	I.Show();

	Point K = 300 / I;
	cout << "Точка K: ";
	K.Show();*/


}
//реализация глобальной перегрузки оператора + для ситуации Point+int
Point operator+(const Point& P, int Digit)
{
	//создаем пустой временный объект для хранения и возврата результата
	Point Result;
	//изменяем значения полей на нужные
	Result.SetX(P.GetX() + Digit); //получаем значение поля Х объекта по ссылке P через метод геттер GetX,
	//затем складываем значение переменной Digit со значением поля X и передаем результат в поле X объекта Result, через метод сеттер SetX
	Result.SetY(P.GetY() + Digit);//получаем значение поля Y объекта по ссылке P через метод геттер GetY,
	//затем складываем значение переменной Digit со значением поля Y и передаем результат в поле Y объекта Result, через метод сеттер SetY
	return Result; //возвращаем значение итогового(нового) объекта
}
//реализация глобальной перегрузки оператора + для ситуации int+Point
Point operator+(int Digit, const Point& P)
{
	//создаем пустой временный объект для хранения и возврата результата
	Point Result;
	//изменяем значения полей на нужные
	Result.SetX(P.GetX() + Digit); //получаем значение поля Х объекта по ссылке P через метод геттер GetX,
	//затем складываем значение переменной Digit со значением поля X и передаем результат в поле X объекта Result, через метод сеттер SetX
	Result.SetY(P.GetY() + Digit);//получаем значение поля Y объекта по ссылке P через метод геттер GetY,
	//затем складываем значение переменной Digit со значением поля Y и передаем результат в поле Y объекта Result, через метод сеттер SetY
	return Result; //возвращаем значение итогового(нового) объекта
}
//реализация глобальной перегрузки оператора - для ситуации Point-int
Point operator-(const Point& P, int Digit)
{
	//создаем пустой временный объект для хранения и возврата результата
	Point Result;
	//изменяем значения полей на нужные
	Result.SetX(P.GetX() - Digit); //получаем значение поля Х объекта по ссылке P через метод геттер GetX,
	//затем вычитаем из значения поля X значение переменной Digit и передаем результат в поле X объекта Result, через метод сеттер SetX
	Result.SetY(P.GetY() - Digit);//получаем значение поля Y объекта по ссылке P через метод геттер GetY,
	//затем вычитаем из значения поля Y значение переменной Digit и передаем результат в поле Y объекта Result, через метод сеттер SetY
	return Result; //возвращаем значение итогового(нового) объекта
}
//реализация глобальной перегрузки оператора - для ситуации int- Point
Point operator-(int Digit, const Point& P)
{
	//создаем пустой временный объект для хранения и возврата результата
	Point Result;
	//изменяем значения полей на нужные
	Result.SetX(Digit - P.GetX()); //получаем значение поля Х объекта по ссылке P через метод геттер GetX,
	//затем вычитаем из значения переменной Digit значения поля X  и передаем результат в поле X объекта Result, через метод сеттер SetX
	Result.SetY(Digit - P.GetY());//получаем значение поля Y объекта по ссылке P через метод геттер GetY,
	//затем вычитаем из значения переменной Digit значения поля Y и передаем результат в поле Y объекта Result, через метод сеттер SetY
	return Result; //возвращаем значение итогового(нового) объекта
}
//реализация глобальной перегрузки оператора * для ситуации Point*int
Point operator*(const Point& P, int Digit)
{
	//создаем пустой временный объект для хранения и возврата результата
	Point Result;
	//изменяем значения полей на нужные
	Result.SetX(P.GetX() * Digit); //получаем значение поля Х объекта по ссылке P через метод геттер GetX,
	//затем умножаем значение переменной Digit со значением поля X и передаем результат в поле X объекта Result, через метод сеттер SetX
	Result.SetY(P.GetY() * Digit);//получаем значение поля Y объекта по ссылке P через метод геттер GetY,
	//затем умножаем значение переменной Digit со значением поля Y и передаем результат в поле Y объекта Result, через метод сеттер SetY
	return Result; //возвращаем значение итогового(нового) объекта
}
//реализация глобальной перегрузки оператора * для ситуации int*Point
Point operator*(int Digit, const Point& P)
{
	//создаем пустой временный объект для хранения и возврата результата
	Point Result;
	//изменяем значения полей на нужные
	Result.SetX(P.GetX() * Digit); //получаем значение поля Х объекта по ссылке P через метод геттер GetX,
	//затем умножаем значение переменной Digit со значением поля X и передаем результат в поле X объекта Result, через метод сеттер SetX
	Result.SetY(P.GetY() * Digit);//получаем значение поля Y объекта по ссылке P через метод геттер GetY,
	//затем умножаем значение переменной Digit со значением поля Y и передаем результат в поле Y объекта Result, через метод сеттер SetY
	return Result; //возвращаем значение итогового(нового) объекта
}
//реализация глобальной перегрузки оператора / для ситуации Point/int
Point operator/(const Point& P, int Digit)
{
	//создаем пустой временный объект для хранения и возврата результата
	Point Result;
	//изменяем значения полей на нужные
	Result.SetX(P.GetX() / Digit); //получаем значение поля Х объекта по ссылке P через метод геттер GetX,
	//затем делим значение поля X  на значение  Digit  и передаем результат в поле X объекта Result, через метод сеттер SetX
	Result.SetY(P.GetY() / Digit);//получаем значение поля Y объекта по ссылке P через метод геттер GetY,
	//затем делим значение поля Y на значение Digit и передаем результат в поле Y объекта Result, через метод сеттер SetY
	return Result; //возвращаем значение итогового(нового) объекта
}
//реализация глобальной перегрузки оператора / для ситуации int/Point

Point operator/(int Digit, const Point& P)
{
	//создаем пустой временный объект для хранения и возврата результата
	Point Result;
	//изменяем значения полей на нужные
	Result.SetX(Digit / P.GetX()); //получаем значение поля Х объекта по ссылке P через метод геттер GetX,
	//затем делим  значение  Digit на значение поля X и передаем результат в поле X объекта Result, через метод сеттер SetX
	Result.SetY(Digit / P.GetY());//получаем значение поля Y объекта по ссылке P через метод геттер GetY,
	//затем делим  значение Digit на значение поля Y  и передаем результат в поле Y объекта Result, через метод сеттер SetY
	return Result; //возвращаем значение итогового(нового) объекта
}

/*//Реализация дружественной перегрузки оператора + для ситуации int + Point
Point operator+(int Digit, const Point& P)
{
		Point Result(P.X, P.Y);
		//увеличиваем значения обоих полей на значение переменной Digit типа данных int
		Result.X += Digit;
		Result.Y += Digit;
		return Result; //возвращаем значение итогового(нового) объекта
}
//Реализация дружественной перегрузки оператора - для ситуации int - Point
Point operator-(int Digit, const Point& P)
{
	Point Result(P.X, P.Y);
	//вычитаем из переменной Digit типа данных int значения обоих полей
	Result.X = Digit - P.X;
	Result.Y = Digit - P.Y;
	return Result; //возвращаем значение итогового(нового) объекта
}
//Реализация дружественной перегрузки оператора * для ситуации int * Point
Point operator*(int Digit, const Point& P)
{
	Point Result(P.X, P.Y);
	//увеличиваем значения обоих полей на значение переменной Digit типа данных int
	Result.X *= Digit;
	Result.Y *= Digit;
	return Result; //возвращаем значение итогового(нового) объекта
}
//Реализация дружественной перегрузки оператора / для ситуации int / Point
Point operator/(int Digit, const Point& P)
{
	Point Result(P.X, P.Y);
	//делим значение переменной Digit типа данных int на значения обоих полей
	Result.X = Digit/P.X;
	Result.Y = Digit/P.Y;
	return Result; //возвращаем значение итогового(нового) объекта
}*/